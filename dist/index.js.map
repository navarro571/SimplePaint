{
  "version": 3,
  "sources": ["../src/canvas/Canvas.ts", "../src/utils/EventResolver.ts", "../src/brush/BrushHandler.ts", "../src/canvas/CanvasMouseEvent.ts", "../src/UI/ButtonHandler.ts", "../src/UI/UISettings.ts", "../src/brush/brushes/Pencil.ts", "../src/utils/Vector2.ts", "../src/brush/brushes/Rect.ts", "../src/brush/brushes/Circle.ts", "../src/index.ts"],
  "sourcesContent": ["\r\nclass Canvas {\r\n    private _canvas: HTMLCanvasElement;\r\n    private _ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(canvas: HTMLCanvasElement, size = { height: 800, width: 600 }) {\r\n        this._canvas = canvas;\r\n        this._ctx = canvas.getContext('2d');\r\n        this._canvas.height = size.height;\r\n        this._canvas.width = size.width;\r\n    }\r\n\r\n    get canvas(): HTMLCanvasElement {\r\n        return this._canvas;\r\n    }\r\n\r\n    get context(): CanvasRenderingContext2D {\r\n        return this._ctx;\r\n    }\r\n\r\n    resizeCanvas(height: number, width: number){\r\n        const canvasData = this._ctx.getImageData(0, 0, this.canvas.width, this._canvas.height);\r\n        this._canvas.height = height;\r\n        this._canvas.width = width;\r\n        this._ctx.putImageData(canvasData, 0, 0);\r\n    }\r\n}\r\nexport default Canvas;\r\n\r\n", "abstract class EventResolver{\r\n    static register(name: string, callback: any): void {\r\n        if(!this[name]) this[name] = new Array();\r\n        this[name].push(callback);\r\n    }\r\n    static unregister(name: string, callback): void {\r\n        if(!this[name]) return;\r\n        this[name].splice(this[name].indexOf(callback), 1);\r\n    }\r\n    static dispatch(name: string, payload): void {\r\n        if(!this[name]) return;\r\n        this[name].forEach(cb => cb(payload));\r\n    }\r\n}\r\n\r\nexport default EventResolver;\r\n", "import IBrush from \"../interfaces/IBrush\";\r\nimport EventResolver from \"../utils/EventResolver\";\r\n\r\n\r\nexport default abstract class BrushHandler {\r\n    private static brush: IBrush;\r\n    private static ctx: CanvasRenderingContext2D;\r\n\r\n    static init(ctx: CanvasRenderingContext2D) {\r\n        EventResolver.register('canvas-mousemove', p => this.brush.onMouseMove(p.e, ctx));\r\n        EventResolver.register('canvas-mousedown', p => this.brush.onMouseDown(p.e, ctx));\r\n        EventResolver.register('canvas-mouseup', p => this.brush.onMouseUp(p.e, ctx));\r\n        EventResolver.register('canvas-mouseout', p => this.brush.onMouseOut(p.e, ctx));\r\n    }\r\n    static setBrush(brush: IBrush) {\r\n        this.brush = brush;\r\n    }\r\n    static setContext(ctx: CanvasRenderingContext2D){\r\n        BrushHandler.ctx = ctx;\r\n    }\r\n}", "import EventResolver from \"../utils/EventResolver\";\r\n\r\nexport default abstract class CanvasMouseEvent {\r\n\r\n    static init(canvas: HTMLCanvasElement) {\r\n        canvas.addEventListener('mousedown',\r\n                e => EventResolver.dispatch('canvas-mousedown', { e }));\r\n        canvas.addEventListener('mousemove',\r\n                e => EventResolver.dispatch('canvas-mousemove', { e }));\r\n        canvas.addEventListener('mouseup',\r\n                e => EventResolver.dispatch('canvas-mouseup', { e }));\r\n        canvas.addEventListener('mouseout',\r\n                e => EventResolver.dispatch('canvas-mouseout', { e }));\r\n    }\r\n}", "import BrushHandler from \"../brush/BrushHandler\"\r\nimport IBrush from \"../interfaces/IBrush\";\r\n\r\nexport default abstract class ButtonHandler {\r\n    static registerButton(btn: HTMLButtonElement, brush: IBrush){\r\n        btn.addEventListener(\"click\", () => BrushHandler.setBrush(brush))\r\n    }\r\n}", "const color: HTMLInputElement = document.querySelector(\"#color-selector\");\r\nconst lineWidth: HTMLInputElement = document.querySelector(\"#linewidth-selector\");\r\nconst lineWidthNumber : HTMLSpanElement = document.querySelector(\"#lineWidth-number\");\r\nconst fill : HTMLInputElement = document.querySelector(\"#fill\");\r\n\r\nwindow.addEventListener('load', ()=>{\r\n    document.querySelector('canvas').scrollIntoView({\r\n        block: \"center\",\r\n        inline: \"center\",\r\n    });\r\n});\r\n\r\nlineWidth.addEventListener(\"mousemove\", () => {\r\n    lineWidthNumber.innerText = lineWidth.value;\r\n});\r\n\r\nlineWidthNumber.innerText = lineWidth.value;\r\n\r\nfunction getColor(): string {\r\n    return color.value || 'black';\r\n}\r\nfunction getLineWidth(): number {\r\n    return Math.floor(parseInt(lineWidth.value)) || 10;\r\n}\r\nfunction isFill(): boolean {\r\n    return fill.checked;\r\n}\r\n\r\nexport {\r\n    getColor,\r\n    getLineWidth,\r\n    isFill,\r\n}", "import IBrush from '../../interfaces/IBrush';\r\nimport { getColor, getLineWidth } from \"../../UI/UISettings\";\r\n\r\nclass Pencil implements IBrush {\r\n    private isPaiting: Boolean = false;\r\n\r\n    onMouseDown(e, ctx) {\r\n        this.isPaiting = true;\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = getColor();\r\n        ctx.fillStyle = getColor();\r\n        ctx.lineWidth = getLineWidth();\r\n        ctx.beginPath()\r\n        this.onMouseMove(e, ctx);\r\n    }\r\n\r\n    onMouseMove(e, ctx) {\r\n        if (!this.isPaiting) return;\r\n        ctx.lineTo(e.offsetX, e.offsetY);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n        ctx.moveTo(e.offsetX, e.offsetY);\r\n    }\r\n\r\n    onMouseUp(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n    onMouseOut(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n}\r\n\r\nexport default Pencil;", "export default class Vector2 {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}", "import IBrush from '../../interfaces/IBrush';\r\nimport {getColor, getLineWidth, isFill} from \"../../UI/UISettings\";\r\nimport Vector2 from \"../../utils/Vector2\";\r\n\r\nclass Pencil implements IBrush {\r\n    private isPaiting: Boolean = false;\r\n    private startPos: Vector2 = new Vector2();\r\n    private imageData: ImageData;\r\n\r\n    onMouseDown(e, ctx) {\r\n        this.isPaiting = true;\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = getColor();\r\n        ctx.fillStyle = getColor();\r\n        ctx.lineWidth = getLineWidth();\r\n        this.startPos = { x: e.offsetX, y: e.offsetY };\r\n        this.imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    }\r\n\r\n    onMouseMove(e, ctx) {\r\n        if (!this.isPaiting) return;\r\n        ctx.putImageData(this.imageData, 0, 0);\r\n        ctx.beginPath();\r\n        ctx.rect(this.startPos.x, this.startPos.y, e.offsetX - this.startPos.x, e.offsetY - this.startPos.y);\r\n        isFill() ? ctx.fill() : ctx.stroke();\r\n    }\r\n\r\n    onMouseUp(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n\r\n    onMouseOut(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n}\r\n\r\nexport default Pencil;", "import IBrush from '../../interfaces/IBrush';\r\nimport {getColor, getLineWidth, isFill} from \"../../UI/UISettings\";\r\nimport Vector2 from \"../../utils/Vector2\";\r\n\r\nclass Circle implements IBrush {\r\n    private isPaiting: Boolean = false;\r\n    private startPos: Vector2 = new Vector2();\r\n    private imageData: ImageData;\r\n\r\n    onMouseDown(e, ctx) {\r\n        this.isPaiting = true;\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = getColor();\r\n        ctx.fillStyle = getColor();\r\n        ctx.lineWidth = getLineWidth();\r\n        this.startPos = { x: e.offsetX, y: e.offsetY };\r\n        this.imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    }\r\n\r\n    onMouseMove(e, ctx) {\r\n        if (!this.isPaiting) return;\r\n        ctx.putImageData(this.imageData, 0, 0);\r\n        ctx.beginPath();\r\n        ctx.arc(this.startPos.x, this.startPos.y, Math.sqrt(((this.startPos.x - e.offsetX)**2) + ((this.startPos.y - e.offsetY)**2)), 0, 2 * Math.PI, false);\r\n        isFill() ? ctx.fill() : ctx.stroke();\r\n    }\r\n\r\n    onMouseUp(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n\r\n    onMouseOut(e, ctx) {\r\n        this.isPaiting = false;\r\n        ctx.closePath();\r\n    }\r\n}\r\n\r\nexport default Circle;", "import Canvas from \"./canvas/Canvas\";\r\nimport BrushHandler from \"./brush/BrushHandler\";\r\nimport CanvasMouseEvent from \"./canvas/CanvasMouseEvent\";\r\nimport ButtonHandler from './UI/ButtonHandler';\r\nimport './style.css';\r\nimport Pencil from \"./brush/brushes/Pencil\";\r\nimport Rect from \"./brush/brushes/Rect\";\r\nimport Circle from \"./brush/brushes/Circle\";\r\n\r\nconst htmlCanvas: HTMLCanvasElement = document.querySelector(\"canvas\");\r\nconst resizeBtn : HTMLButtonElement = document.querySelector(\"#canvas-resize\");\r\nconst resizeHeight: HTMLInputElement = document.querySelector(\"#canvas-resize-height\");\r\nconst resizeWidth: HTMLInputElement = document.querySelector(\"#canvas-resize-width\");\r\n\r\nconst canvas = new Canvas(htmlCanvas, { height: 900, width: 1600 });\r\nconst pencil = new Pencil();\r\nconst rect = new Rect();\r\nconst circle = new Circle();\r\n\r\nButtonHandler.registerButton(document.querySelector('#pencil-brush'), pencil);\r\nButtonHandler.registerButton(document.querySelector('#rect-brush'), rect);\r\nButtonHandler.registerButton(document.querySelector('#circle-brush'), circle);\r\n\r\nCanvasMouseEvent.init(canvas.canvas);\r\nBrushHandler.init(canvas.context);\r\nBrushHandler.setBrush(pencil);\r\n\r\nresizeBtn.onclick = () => canvas.resizeCanvas(parseInt(resizeHeight.value), parseInt(resizeWidth.value));\r\n\r\n\r\n\r\n"],
  "mappings": "AACA,WAAa,CAIT,YAAY,EAA2B,EAAO,CAAE,OAAQ,IAAK,MAAO,KAAO,CACvE,KAAK,QAAU,EACf,KAAK,KAAO,EAAO,WAAW,MAC9B,KAAK,QAAQ,OAAS,EAAK,OAC3B,KAAK,QAAQ,MAAQ,EAAK,SAG1B,SAA4B,CAC5B,MAAO,MAAK,WAGZ,UAAoC,CACpC,MAAO,MAAK,KAGhB,aAAa,EAAgB,EAAc,CACvC,GAAM,GAAa,KAAK,KAAK,aAAa,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,QAAQ,QAChF,KAAK,QAAQ,OAAS,EACtB,KAAK,QAAQ,MAAQ,EACrB,KAAK,KAAK,aAAa,EAAY,EAAG,KAGvC,EAAQ,EC3Bf,WAA4B,OACjB,UAAS,EAAc,EAAqB,CAC/C,AAAI,KAAK,IAAO,MAAK,GAAQ,GAAI,QACjC,KAAK,GAAM,KAAK,SAEb,YAAW,EAAc,EAAgB,CAC5C,AAAG,CAAC,KAAK,IACT,KAAK,GAAM,OAAO,KAAK,GAAM,QAAQ,GAAW,SAE7C,UAAS,EAAc,EAAe,CACzC,AAAG,CAAC,KAAK,IACT,KAAK,GAAM,QAAQ,GAAM,EAAG,MAI7B,EAAQ,ECXf,WAA2C,OAIhC,MAAK,EAA+B,CACvC,EAAc,SAAS,mBAAoB,GAAK,KAAK,MAAM,YAAY,EAAE,EAAG,IAC5E,EAAc,SAAS,mBAAoB,GAAK,KAAK,MAAM,YAAY,EAAE,EAAG,IAC5E,EAAc,SAAS,iBAAkB,GAAK,KAAK,MAAM,UAAU,EAAE,EAAG,IACxE,EAAc,SAAS,kBAAmB,GAAK,KAAK,MAAM,WAAW,EAAE,EAAG,UAEvE,UAAS,EAAe,CAC3B,KAAK,MAAQ,QAEV,YAAW,EAA8B,CAC5C,EAAa,IAAM,IChB3B,WAA+C,OAEpC,MAAK,EAA2B,CACnC,EAAO,iBAAiB,YAChB,GAAK,EAAc,SAAS,mBAAoB,CAAE,OAC1D,EAAO,iBAAiB,YAChB,GAAK,EAAc,SAAS,mBAAoB,CAAE,OAC1D,EAAO,iBAAiB,UAChB,GAAK,EAAc,SAAS,iBAAkB,CAAE,OACxD,EAAO,iBAAiB,WAChB,GAAK,EAAc,SAAS,kBAAmB,CAAE,SCTjE,WAA4C,OACjC,gBAAe,EAAwB,EAAc,CACxD,EAAI,iBAAiB,QAAS,IAAM,EAAa,SAAS,MCLlE,GAAM,GAA0B,SAAS,cAAc,mBACjD,EAA8B,SAAS,cAAc,uBACrD,EAAoC,SAAS,cAAc,qBAC3D,EAA0B,SAAS,cAAc,SAEvD,OAAO,iBAAiB,OAAQ,IAAI,CAChC,SAAS,cAAc,UAAU,eAAe,CAC5C,MAAO,SACP,OAAQ,aAIhB,EAAU,iBAAiB,YAAa,IAAM,CAC1C,EAAgB,UAAY,EAAU,QAG1C,EAAgB,UAAY,EAAU,MAEtC,YAA4B,CACxB,MAAO,GAAM,OAAS,QAE1B,YAAgC,CAC5B,MAAO,MAAK,MAAM,SAAS,EAAU,SAAW,GAEpD,YAA2B,CACvB,MAAO,GAAK,QCtBhB,WAA+B,CAA/B,aAHA,CAIY,eAAqB,GAE7B,YAAY,EAAG,EAAK,CAChB,KAAK,UAAY,GACjB,EAAI,QAAU,QACd,EAAI,YAAc,IAClB,EAAI,UAAY,IAChB,EAAI,UAAY,IAChB,EAAI,YACJ,KAAK,YAAY,EAAG,GAGxB,YAAY,EAAG,EAAK,CAChB,AAAI,CAAC,KAAK,WACV,GAAI,OAAO,EAAE,QAAS,EAAE,SACxB,EAAI,SACJ,EAAI,YACJ,EAAI,OAAO,EAAE,QAAS,EAAE,UAG5B,UAAU,EAAG,EAAK,CACd,KAAK,UAAY,GACjB,EAAI,YAER,WAAW,EAAG,EAAK,CACf,KAAK,UAAY,GACjB,EAAI,cAIL,EAAQ,EClCf,WAA6B,CAIzB,YAAY,EAAY,EAAG,EAAY,EAAG,CACtC,KAAK,EAAI,EACT,KAAK,EAAI,ICFjB,WAA+B,CAA/B,aAJA,CAKY,eAAqB,GACrB,cAAoB,GAAI,GAGhC,YAAY,EAAG,EAAK,CAChB,KAAK,UAAY,GACjB,EAAI,QAAU,QACd,EAAI,YAAc,IAClB,EAAI,UAAY,IAChB,EAAI,UAAY,IAChB,KAAK,SAAW,CAAE,EAAG,EAAE,QAAS,EAAG,EAAE,SACrC,KAAK,UAAY,EAAI,aAAa,EAAG,EAAG,EAAI,OAAO,MAAO,EAAI,OAAO,QAGzE,YAAY,EAAG,EAAK,CAChB,AAAI,CAAC,KAAK,WACV,GAAI,aAAa,KAAK,UAAW,EAAG,GACpC,EAAI,YACJ,EAAI,KAAK,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,EAAE,QAAU,KAAK,SAAS,EAAG,EAAE,QAAU,KAAK,SAAS,GAClG,IAAW,EAAI,OAAS,EAAI,UAGhC,UAAU,EAAG,EAAK,CACd,KAAK,UAAY,GACjB,EAAI,YAGR,WAAW,EAAG,EAAK,CACf,KAAK,UAAY,GACjB,EAAI,cAIL,EAAQ,EClCf,WAA+B,CAA/B,aAJA,CAKY,eAAqB,GACrB,cAAoB,GAAI,GAGhC,YAAY,EAAG,EAAK,CAChB,KAAK,UAAY,GACjB,EAAI,QAAU,QACd,EAAI,YAAc,IAClB,EAAI,UAAY,IAChB,EAAI,UAAY,IAChB,KAAK,SAAW,CAAE,EAAG,EAAE,QAAS,EAAG,EAAE,SACrC,KAAK,UAAY,EAAI,aAAa,EAAG,EAAG,EAAI,OAAO,MAAO,EAAI,OAAO,QAGzE,YAAY,EAAG,EAAK,CAChB,AAAI,CAAC,KAAK,WACV,GAAI,aAAa,KAAK,UAAW,EAAG,GACpC,EAAI,YACJ,EAAI,IAAI,KAAK,SAAS,EAAG,KAAK,SAAS,EAAG,KAAK,KAAO,MAAK,SAAS,EAAI,EAAE,UAAU,EAAO,MAAK,SAAS,EAAI,EAAE,UAAU,GAAK,EAAG,EAAI,KAAK,GAAI,IAC9I,IAAW,EAAI,OAAS,EAAI,UAGhC,UAAU,EAAG,EAAK,CACd,KAAK,UAAY,GACjB,EAAI,YAGR,WAAW,EAAG,EAAK,CACf,KAAK,UAAY,GACjB,EAAI,cAIL,EAAQ,EC7Bf,GAAM,GAAgC,SAAS,cAAc,UACvD,EAAgC,SAAS,cAAc,kBACvD,EAAiC,SAAS,cAAc,yBACxD,EAAgC,SAAS,cAAc,wBAEvD,EAAS,GAAI,GAAO,EAAY,CAAE,OAAQ,IAAK,MAAO,OACtD,EAAS,GAAI,GACb,EAAO,GAAI,GACX,EAAS,GAAI,GAEnB,EAAc,eAAe,SAAS,cAAc,iBAAkB,GACtE,EAAc,eAAe,SAAS,cAAc,eAAgB,GACpE,EAAc,eAAe,SAAS,cAAc,iBAAkB,GAEtE,EAAiB,KAAK,EAAO,QAC7B,EAAa,KAAK,EAAO,SACzB,EAAa,SAAS,GAEtB,EAAU,QAAU,IAAM,EAAO,aAAa,SAAS,EAAa,OAAQ,SAAS,EAAY",
  "names": []
}
